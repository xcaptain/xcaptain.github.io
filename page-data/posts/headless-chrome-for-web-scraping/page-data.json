{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/headless-chrome-for-web-scraping/","webpackCompilationHash":"f6f4562cce5c2ca1e160","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"18b06b1d-7d16-5018-b781-36b4c42adf0c","html":"<p>在使用<a href=\"https://scrapy.org/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">scrapy</a> 编写爬虫的过程中遇到一些动态加载的内容不好抓取，所以研究了一下<a href=\"https://chromium.googlesource.com/chromium/src/+/lkgr/headless/README.md\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">headless chromium</a>，如果不用这种方式的话就得手动\n破解ajax请求的接口，了解不同网站做的校验规则，使用浏览器解析dom然后分析页面结构是最简单快速的方法了。</p>\n<h2 id=\"headless-chromium基本用法\"><a href=\"#headless-chromium%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95\" aria-label=\"headless chromium基本用法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>headless chromium基本用法</h2>\n<p>根据<a href=\"https://developers.google.com/web/updates/2017/04/headless-chrome\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">官方教程</a> 说明，在chromium59版本之后的浏览器自带了无头模式，只要通过命令行执行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">chromium --headless --disable-gpu</code></pre></div>\n<p>就能打开一个无头的浏览器了，如果我想打开某个网页，并且分析完全加载完成的dom结构，那么只要执行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">chromium --headless --disable-gpu --dump-dom http://www.dianping.com/shop/14198848 <span class=\"token operator\">></span> /tmp/14198848.html</code></pre></div>\n<p>想要做后续的分析直接分析这个html文件就行了</p>\n<h2 id=\"通过selenium来驱动headless-chromium\"><a href=\"#%E9%80%9A%E8%BF%87selenium%E6%9D%A5%E9%A9%B1%E5%8A%A8headless-chromium\" aria-label=\"通过selenium来驱动headless chromium permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通过selenium来驱动headless chromium</h2>\n<p>python有个叫selenium的包叫作，安装好之后就能操作浏览器了</p>\n<h3 id=\"安装依赖\"><a href=\"#%E5%AE%89%E8%A3%85%E4%BE%9D%E8%B5%96\" aria-label=\"安装依赖 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>安装依赖</h3>\n<p><code class=\"language-text\">sudo pip install selenium</code></p>\n<h3 id=\"示例代码\"><a href=\"#%E7%A4%BA%E4%BE%8B%E4%BB%A3%E7%A0%81\" aria-label=\"示例代码 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>示例代码</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n<span class=\"token keyword\">from</span> selenium<span class=\"token punctuation\">.</span>webdriver<span class=\"token punctuation\">.</span>chrome<span class=\"token punctuation\">.</span>options <span class=\"token keyword\">import</span> Options\n\nchrome_options <span class=\"token operator\">=</span> Options<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--headless\"</span><span class=\"token punctuation\">)</span>\nchrome_options<span class=\"token punctuation\">.</span>add_argument<span class=\"token punctuation\">(</span><span class=\"token string\">\"--user-agent=some user-agent name\"</span><span class=\"token punctuation\">)</span>\n\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span>chrome_options<span class=\"token operator\">=</span>chrome_options<span class=\"token punctuation\">)</span>\ndriver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'http://www.dianping.com/shop/59473758'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 返回html</span>\nhtml <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>execute_script<span class=\"token punctuation\">(</span><span class=\"token string\">\"return document.documentElement.outerHTML\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 读取js全局变量</span>\nshop_config <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>execute_script<span class=\"token punctuation\">(</span><span class=\"token string\">\"return window.shop_config\"</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token string\">'59474758'</span>\n<span class=\"token keyword\">with</span> <span class=\"token builtin\">open</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.html'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'wb'</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">as</span> f<span class=\"token punctuation\">:</span>\n    f<span class=\"token punctuation\">.</span>write<span class=\"token punctuation\">(</span><span class=\"token builtin\">str</span><span class=\"token punctuation\">.</span>encode<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\ndriver<span class=\"token punctuation\">.</span>save_screenshot<span class=\"token punctuation\">(</span><span class=\"token builtin\">id</span> <span class=\"token operator\">+</span> <span class=\"token string\">'.png'</span><span class=\"token punctuation\">)</span>\ndriver<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关闭chrome进程</span>\ndriver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 关闭chromewebdriver进程</span></code></pre></div>\n<p>这段脚本的作用很明显，首先是创建一个headless chromium的浏览器对象，然后用它打开大众点评的一个网页，然后导出dom，写入到一个html文件\n中，最后把当前网页截图保存为一个png文件，并且关闭浏览器。竟然还能读取到js的变量，真是太强大了</p>\n<h2 id=\"在使用headless-chromium过程中遇到的问题\"><a href=\"#%E5%9C%A8%E4%BD%BF%E7%94%A8headless-chromium%E8%BF%87%E7%A8%8B%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98\" aria-label=\"在使用headless chromium过程中遇到的问题 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>在使用headless chromium过程中遇到的问题</h2>\n<h3 id=\"一些引用的资源加载超时，导致整个页面超时\"><a href=\"#%E4%B8%80%E4%BA%9B%E5%BC%95%E7%94%A8%E7%9A%84%E8%B5%84%E6%BA%90%E5%8A%A0%E8%BD%BD%E8%B6%85%E6%97%B6%EF%BC%8C%E5%AF%BC%E8%87%B4%E6%95%B4%E4%B8%AA%E9%A1%B5%E9%9D%A2%E8%B6%85%E6%97%B6\" aria-label=\"一些引用的资源加载超时，导致整个页面超时 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些引用的资源加载超时，导致整个页面超时</h3>\n<p>这个问题没有好的解决办法，看到文档上有设置页面ready的配置</p>\n<ol>\n<li><a href=\"https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagegotourl-options\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/GoogleChrome/puppeteer/blob/master/docs/api.md#pagegotourl-options</a></li>\n<li><a href=\"https://stackoverflow.com/questions/46160929/puppeteer-wait-for-all-images-to-load-then-take-screenshot\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/46160929/puppeteer-wait-for-all-images-to-load-then-take-screenshot</a>\n但是selenium webdriver没法提供扩展，目前我的解决办法是加了</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\">driver<span class=\"token punctuation\">.</span>implicitly_wait<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 资源10s没加载完就放弃</span>\ndriver<span class=\"token punctuation\">.</span>set_script_timeout<span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 资源10s没加载完就放弃</span>\ndriver<span class=\"token punctuation\">.</span>set_page_load_timeout<span class=\"token punctuation\">(</span><span class=\"token number\">30</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># 请求30s没完成就放弃</span></code></pre></div>\n<p>不是很好用，最好的办法是绕过这些有加载不了的资源的网页。</p>\n<h3 id=\"python程序异常退出导致chrome进程变成僵尸进程\"><a href=\"#python%E7%A8%8B%E5%BA%8F%E5%BC%82%E5%B8%B8%E9%80%80%E5%87%BA%E5%AF%BC%E8%87%B4chrome%E8%BF%9B%E7%A8%8B%E5%8F%98%E6%88%90%E5%83%B5%E5%B0%B8%E8%BF%9B%E7%A8%8B\" aria-label=\"python程序异常退出导致chrome进程变成僵尸进程 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python程序异常退出导致chrome进程变成僵尸进程</h3>\n<p>正确设置异常处理程序，在出现异常时记得close()和quit()</p>\n<h2 id=\"scrapy操作字符串\"><a href=\"#scrapy%E6%93%8D%E4%BD%9C%E5%AD%97%E7%AC%A6%E4%B8%B2\" aria-label=\"scrapy操作字符串 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>scrapy操作字符串</h2>\n<p>通过headless chromium导出的是纯字符串，如果要让它支持xpath解析，需要处理一下，比如：</p>\n<ol>\n<li><a href=\"https://stackoverflow.com/questions/27323740/scrapy-convert-html-string-to-htmlresponse-object\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">转成HtmlResponse对象</a></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> scrapy<span class=\"token punctuation\">.</span>http <span class=\"token keyword\">import</span> HtmlResponse\n\nresponse <span class=\"token operator\">=</span> HtmlResponse<span class=\"token punctuation\">(</span>url<span class=\"token operator\">=</span><span class=\"token string\">\"my HTML string\"</span><span class=\"token punctuation\">,</span> body<span class=\"token operator\">=</span><span class=\"token string\">'&lt;div id=\"test\">Test text&lt;/div>'</span><span class=\"token punctuation\">)</span>\nresponse<span class=\"token punctuation\">.</span>xpath<span class=\"token punctuation\">(</span><span class=\"token string\">'//div[@id=\"test\"]/text()'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"2\">\n<li><a href=\"https://stackoverflow.com/questions/8711030/fetch-partial-string-matched-html-tag-using-xpath\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">转成lxml对象</a></li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> lxml\n\nhtml <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;div id=\"test\">Test text&lt;/div>'</span>\ndoc <span class=\"token operator\">=</span> lxml<span class=\"token punctuation\">.</span>html<span class=\"token punctuation\">.</span>fromstring<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">)</span></code></pre></div>\n<h2 id=\"使用beautifulsoup操作html\"><a href=\"#%E4%BD%BF%E7%94%A8beautifulsoup%E6%93%8D%E4%BD%9Chtml\" aria-label=\"使用beautifulsoup操作html permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用BeautifulSoup操作html</h2>\n<p>bs的api比lxml的易用多了，比如说要新建一个标签，并且添加到某个节点下，lxml就比较难实现了，毕竟html不是标准的xml，看了一下lxml的api感觉比较复杂\n就选择了用bs</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\n<span class=\"token keyword\">import</span> json\nsoup <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'html5lib'</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># add script tag</span>\nscript_tag <span class=\"token operator\">=</span> soup<span class=\"token punctuation\">.</span>new_tag<span class=\"token punctuation\">(</span><span class=\"token string\">'script'</span><span class=\"token punctuation\">)</span>\nscript_tag<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token string\">'window.globale_config='</span> <span class=\"token operator\">+</span> json<span class=\"token punctuation\">.</span>dumps<span class=\"token punctuation\">(</span>global_config<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token string\">';'</span><span class=\"token punctuation\">)</span>\nsoup<span class=\"token punctuation\">.</span>body<span class=\"token punctuation\">.</span>insert_before<span class=\"token punctuation\">(</span>script_tag<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这段代码在body标签的前面新增了一个script标签，标签内部定义了一个全局变量，这样就可以把dom和脚本都保存到本地了</p>\n<p>有了headless chromium之后写爬虫就方便多了，甚至现代的各种SPA应用也不用担心，happy hacking!</p>","fields":{"slug":"/posts/headless-chrome-for-web-scraping/","tagSlugs":["/tag/programming/","/tag/web-development/","/tag/chrome/"]},"frontmatter":{"date":"2017-08-28 01:00:00","description":"使用headless chrome进行网页爬取","tags":["Programming","Web Development","Chrome"],"title":"使用headless chrome进行网页爬取"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/headless-chrome-for-web-scraping/"}}}