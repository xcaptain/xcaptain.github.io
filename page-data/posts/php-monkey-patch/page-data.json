{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/php-monkey-patch/","webpackCompilationHash":"539c93736a11b6b79b58","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"6cc1cd47-5795-57a0-b25e-9e302751dbd9","html":"<p>ruby和python都有<a href=\"https://en.wikipedia.org/wiki/Monkey_patch\">monkey patch</a>，也就是可以在运行时修改某个对象或类的方法</p>\n<p>在过去php是没有这种特性的，如果要给一个对象添加方法只有继承</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'foo'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">A</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>如果在某个情况下，我们要给<code class=\"language-text\">$obj</code>对象添加一个方法，这时候该怎么办呢？</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">B</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">B</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>这样obj对象就有了<code class=\"language-text\">bar</code>方法，但是这种办法很傻，得新建一个子类，而且这个子类可能很难被用上，如果在另外的情况下要用到另一个新的方法<code class=\"language-text\">bar2</code>，这时候又该怎么办呢，是再写一个继承？继承A还是B呢？</p>\n<p>php7提供了一个新的语法叫做<a href=\"http://php.net/manual/en/language.oop5.anonymous.php\">匿名类</a> 在上面的例子中，要给类A的实例添加方法就不需要新建一个类文件然后去继承，直接</p>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token php language-php\"><span class=\"token delimiter important\">&lt;?php</span>\n\n<span class=\"token variable\">$obj</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">class</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">A</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">public</span> <span class=\"token keyword\">function</span> <span class=\"token function\">bar</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token single-quoted-string string\">'bar'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></span></code></pre></div>\n<p>这样obj也有<code class=\"language-text\">bar</code>方法，但是却没有创建额外的类文件，毕竟目的只是作为临时补丁修复一下，如果能够确定这个方法会被很多地方用到，那么就得考虑是否把这个方法添加到基类中，还是放到单独的子类。</p>\n<p>在测试中这特性非常有用，测试<code class=\"language-text\">protected</code>方法，构造<code class=\"language-text\">mock</code>对象而不用改原有代码，第一次在真实场景中见到是在<a href=\"https://github.com/spatie/laravel-activitylog\">activity-log</a>这个项目中<a href=\"https://github.com/spatie/laravel-activitylog/blob/master/tests/DetectsChangesTest.php\">https://github.com/spatie/laravel-activitylog/blob/master/tests/DetectsChangesTest.php</a>这里就构造了仅仅用于测试的model对象而没有改写原有的model</p>","fields":{"slug":"/posts/php-monkey-patch/","tagSlugs":["/tag/php/","/tag/programming/"]},"frontmatter":{"date":"2016-09-30","description":"php中使用monkey patch以及在ruby和python中是如何做的","tags":["PHP","Programming"],"title":"php猴子补丁"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/php-monkey-patch/"}}}