{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/rust-websocket-server/","webpackCompilationHash":"d94862b0a5cb0cab2c6f","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"6eded20c-8d2c-5323-a58f-07b5a4e3d07d","html":"<p>最近需要做实时推送相关的应用，所以继续调研了一下websocket，在15年底的时候曾经使用过 <a href=\"https://github.com/sumory/gru\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Gru</a> 来做聊天推送，\n但是那时候没仔细研究过websocket的细节。现在趁机自己构思一下</p>\n<h2 id=\"使用-ws-rs-构建websocket服务端\"><a href=\"#%E4%BD%BF%E7%94%A8-ws-rs-%E6%9E%84%E5%BB%BAwebsocket%E6%9C%8D%E5%8A%A1%E7%AB%AF\" aria-label=\"使用 ws rs 构建websocket服务端 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>使用 <a href=\"https://github.com/housleyjk/ws-rs\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ws-rs</a> 构建websocket服务端</h2>\n<p>按照 <a href=\"https://ws-rs.org/guide\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Guide</a> 搭建服务端应用，代码见下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cargo new ws-server1 --bin</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> ws<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> ws<span class=\"token punctuation\">::</span>listen<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"127.0.0.1:3012\"</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token punctuation\">|</span>out<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token punctuation\">|</span>msg<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"received msg: {}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">broadcast</span><span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">cargo run</code> 运行服务端</p>\n<h2 id=\"服务端推送\"><a href=\"#%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%8E%A8%E9%80%81\" aria-label=\"服务端推送 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>服务端推送</h2>\n<p>往socket里面推送消息，代码见下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">cargo new ws-client1 --bin</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">crate</span> ws<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">use</span> ws<span class=\"token punctuation\">::</span><span class=\"token punctuation\">{</span>connect<span class=\"token punctuation\">,</span> CloseCode<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">connect</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ws://127.0.0.1:3012\"</span><span class=\"token punctuation\">,</span> <span class=\"token closure-params\"><span class=\"token punctuation\">|</span>out<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n        out<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello WebSocket\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">move</span> <span class=\"token closure-params\"><span class=\"token punctuation\">|</span>msg<span class=\"token punctuation\">|</span></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Got message: {}\"</span><span class=\"token punctuation\">,</span> msg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            out<span class=\"token punctuation\">.</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>CloseCode<span class=\"token punctuation\">::</span>Normal<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">unwrap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行 <code class=\"language-text\">cargo run</code>，这时候会看到服务端输出<code class=\"language-text\">received msg: Hello WebSocket</code>，客户端输出<code class=\"language-text\">Got message: Hello WebSocket</code></p>\n<h2 id=\"客户端连接\"><a href=\"#%E5%AE%A2%E6%88%B7%E7%AB%AF%E8%BF%9E%E6%8E%A5\" aria-label=\"客户端连接 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>客户端连接</h2>\n<p>创建2个websocket客户端连接，打开2个chrome标签，分别在终端执行</p>\n<div class=\"gatsby-highlight\" data-language=\"rust\"><pre class=\"language-rust\"><code class=\"language-rust\">ws <span class=\"token operator\">=</span> new <span class=\"token function\">WebSocket</span><span class=\"token punctuation\">(</span><span class=\"token lifetime-annotation symbol\">'ws://127.0.0.1:3012</span><span class=\"token lifetime-annotation symbol\">');</span> <span class=\"token comment\">// 创建连接</span>\nws<span class=\"token punctuation\">.</span><span class=\"token function\">addEventListener</span><span class=\"token punctuation\">(</span><span class=\"token lifetime-annotation symbol\">'message</span><span class=\"token lifetime-annotation symbol\">',</span> <span class=\"token function\">function</span> <span class=\"token punctuation\">(</span>event<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token lifetime-annotation symbol\">'Message</span> from server <span class=\"token lifetime-annotation symbol\">',</span> event<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 监听服务端</span>\n\nws<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token lifetime-annotation symbol\">'from</span> browser<span class=\"token lifetime-annotation symbol\">');</span> <span class=\"token comment\">// 可以在2个console中互相发消息玩</span></code></pre></div>\n<p>能发现websocket会自动检测连接，如果连接断开会提示 =WebSocket is already in CLOSING or CLOSED state.= 这也省去了手动发送心跳包\n检测连接的麻烦</p>","fields":{"slug":"/posts/rust-websocket-server/","tagSlugs":["/tag/rust/","/tag/programming/"]},"frontmatter":{"date":"2017-08-15","description":"使用rust做websocket服务器，websocket协议的标准规范，用途等","tags":["Rust","Programming"],"title":"使用rust创建websocket服务器"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/rust-websocket-server/"}}}