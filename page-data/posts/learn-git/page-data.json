{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/learn-git/","webpackCompilationHash":"d94862b0a5cb0cab2c6f","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"06263730-5aba-5ea5-a5ee-7bf4d0687bd4","html":"<p>继续学习git，把统计后台的代码从内部git服务器迁移到github上面了，用的是自己的私有仓库。</p>\n<p>目前主要用到的功能有：</p>\n<ol>\n<li>添加远程仓库\n<code class=\"language-text\">git remote add origin https://github.com/xcaptain/simple-admin.git</code>\n这样就能添加一个远程仓库了，等以后把代码push上去就行了，访问远程仓库的方式有2种，一种是ssh，一种是https，上面这种是https的仓库，也是github默认的访问仓库的方法，\n因为ssh太不安全了，对于我们这种生活在封锁国度的老百姓来说，很容易被屏蔽。</li>\n<li>往远程仓库里面提交代码\n<code class=\"language-text\">git commit -m &#39;some comment&#39;</code>\n这样就可以提交代码，返回一个hash值标识的版本号，提交之后代码版本还在本地，如果要多方合作开发，那就得把改动保存到一个大家都可以访问的远程仓库，\n<code class=\"language-text\">git push origin master</code>，把本地版本推送到远程的master分支。</li>\n<li>建立本地分支\n<code class=\"language-text\">git branch dev</code>\n这样就在本地创建了一个叫做dev的分支，并且会自动切换到这个dev分支，如果建了好多个分支，想查看当前自己在哪个分支，直接<code class=\"language-text\">git branch</code>就会列出，当然如果使用的是zsh或者是\nfish这样的shell，一般都会有git的插件，可以显示当前所在分支。</li>\n<li>把本地分支添加到远程仓库\n<code class=\"language-text\">git checkout dev</code>切换到dev分支，然后<code class=\"language-text\">git push origin dev</code>就可以把代码推送到远程仓库的dev分支了。</li>\n<li>打标签\n<code class=\"language-text\">git tag</code>可以查看当前版本库的所有标签信息，如果要添加标签，那么就是<code class=\"language-text\">git tag -a v0.2 -m &#39;优化流量统计代码，统一风格&#39;</code>添加一个叫作v0.2的标签，并且提交。如果要把\n本地的标签信息提交到远程仓库，那么就是<code class=\"language-text\">git push --tags</code>，然后去github上查看就能看到对应的v0.2版本了。</li>\n<li>查看提交版本\n<code class=\"language-text\">git log</code>, <code class=\"language-text\">git diff</code>，我一般喜欢用emacs的magit插件来查看diff和版本。</li>\n<li>把未暂存的文件回滚\n<code class=\"language-text\">git checkout file1</code>，这样会从版本库中检出上一个提交的file1的版本，覆盖掉当前这个未提交的版本。</li>\n<li>回滚版本库\n这个操作目前做得比较少，都是<code class=\"language-text\">git reset --hard HEAD~1</code>，来回到上一个版本的，对于这个操作还不熟悉，至少svn回滚已经是很熟悉的了。</li>\n</ol>\n<p>git的功能很强大也很复杂，但是一定是要掌握的，这样才能成为一个合格的项目经理，以后慢慢积累，有新的体会再来更新这篇博客。</p>","fields":{"slug":"/posts/learn-git/","tagSlugs":["/tag/git/","/tag/programming/"]},"frontmatter":{"date":"2015-06-01","description":"继续学习git，把统计后台的代码从内部git服务器迁移到github上面了，用的是自己的私有仓库...","tags":["Git","Programming"],"title":"学习git"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/learn-git/"}}}