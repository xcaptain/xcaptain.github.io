{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/php-multi-process-task/","webpackCompilationHash":"539c93736a11b6b79b58","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"40f3dcbb-3308-5937-8a0e-2fe4f404eecf","html":"<p>在写php脚本的过程中经常会遇到要并行处理大量数据的问题，比如说批量从数据库中处理几万行数据，调用第三方接口处理大数据等等，如果仅仅是循环去处理会导致非常低效，PHP本身是支持多进程的，如果让多个进程同时处理这部分数据就会让性能快很多。</p>\n<p>在工作中遇到了一个这样的问题，把它抽象一下作为一个典型的例子记录，方便下次察看。</p>\n<h3 id=\"多进程生成csv文件的php脚本\"><a href=\"#%E5%A4%9A%E8%BF%9B%E7%A8%8B%E7%94%9F%E6%88%90csv%E6%96%87%E4%BB%B6%E7%9A%84php%E8%84%9A%E6%9C%AC\" aria-label=\"多进程生成csv文件的php脚本 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>多进程生成csv文件的PHP脚本</h3>\n<p>代码见<a href=\"https://gist.github.com/xcaptain/57aa46eaf52a1e0233f04caef1f1df66\">gist</a></p>\n<p>简单的说明：</p>\n<ol>\n<li>\n<p>通过<code class=\"language-text\">generateData</code>方法生成测试数据，目标是把这部分测试数据写入到一个csv文件中</p>\n</li>\n<li>\n<p>通过<code class=\"language-text\">devideWork</code>方法来分割任务，在初始化过程中定义了工作进程数量，生成每个工作进程的任务量也就是pageSize的值</p>\n</li>\n<li>\n<p>在主进程中把csv头部写入文件</p>\n</li>\n<li>\n<p>多进程的核心部分是<code class=\"language-text\">runProcess</code>方法，<code class=\"language-text\">pcntl_fork</code>生成子进程，让子进程执行写csv的操作<code class=\"language-text\">writeCsv</code>，<code class=\"language-text\">pcntl_wexitstatus</code>回收子进程。</p>\n</li>\n</ol>\n<p><code class=\"language-text\">writeCsv</code>是很慢的操作，但是<code class=\"language-text\">pcntl_fork</code>是很快的，如果一个进程一直等待着执行<code class=\"language-text\">writeCsv</code>就造成了低效，但是均分任务之后就飞快了。</p>\n<h3 id=\"什么任务可以多进程执行\"><a href=\"#%E4%BB%80%E4%B9%88%E4%BB%BB%E5%8A%A1%E5%8F%AF%E4%BB%A5%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%89%A7%E8%A1%8C\" aria-label=\"什么任务可以多进程执行 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>什么任务可以多进程执行</h3>\n<p>自己简单总结一下可以分为:</p>\n<ol>\n<li>\n<p>任务可以明确分割，如果任务有很复杂的依赖关系，有严格的执行顺序要求，肯定没法并行</p>\n</li>\n<li>\n<p>每一部分任务的结果可以很好的合并，在这里是追加到文件</p>\n</li>\n</ol>\n<h3 id=\"对于php多进程模型的一些推测\"><a href=\"#%E5%AF%B9%E4%BA%8Ephp%E5%A4%9A%E8%BF%9B%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E4%B8%80%E4%BA%9B%E6%8E%A8%E6%B5%8B\" aria-label=\"对于php多进程模型的一些推测 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>对于PHP多进程模型的一些推测</h3>\n<ol>\n<li>\n<p><code class=\"language-text\">pcntl_fork</code>生成的子进程是对父进程的深度拷贝，子进程拥有了父进程中的整个对象，每个对象都复制了一份<code class=\"language-text\">data</code>属性</p>\n</li>\n<li>\n<p>子进程无法改变父进程中的变量，在<code class=\"language-text\">writeCsv</code>方法中子进程的<code class=\"language-text\">$this-&gt;counter</code>自增了，但是父进程中的<code class=\"language-text\">$this-&gt;counter</code>没有变化</p>\n</li>\n<li>\n<p>子进程和父进程无法直接通信，必须借助类似文件句柄这样的东西才能共享数据，难怪在unix/linux的设计哲学中文件如此重要</p>\n</li>\n</ol>\n<h3 id=\"几个文件相关的实用小命令\"><a href=\"#%E5%87%A0%E4%B8%AA%E6%96%87%E4%BB%B6%E7%9B%B8%E5%85%B3%E7%9A%84%E5%AE%9E%E7%94%A8%E5%B0%8F%E5%91%BD%E4%BB%A4\" aria-label=\"几个文件相关的实用小命令 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>几个文件相关的实用小命令</h3>\n<ol>\n<li>\n<p>显示重复行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sort</span> FILE <span class=\"token operator\">|</span> <span class=\"token function\">uniq</span> -cd</code></pre></div>\n</li>\n<li>\n<p>删除重复行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'!seen[<span class=\"token variable\">$0</span>]++'</span> filename</code></pre></div>\n</li>\n<li>\n<p>删除长度更短的行</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">awk</span> <span class=\"token string\">'length(<span class=\"token variable\">$0</span>)>3'</span> filename</code></pre></div>\n</li>\n</ol>","fields":{"slug":"/posts/php-multi-process-task/","tagSlugs":["/tag/php/","/tag/programming/"]},"frontmatter":{"date":"2016-09-09","description":"在写php脚本的过程中经常会遇到要并行处理大量数据的问题，比如说批量从数据库中处理几万行数据，调用第三方接口处理大数据等等，如果仅仅是循环去处理会导致非常低效，PHP本身是支持多进程的，如果让多个进程同时处理这部分数据就会让性能快很多...","tags":["PHP","Programming"],"title":"php多进程处理大任务"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/php-multi-process-task/"}}}