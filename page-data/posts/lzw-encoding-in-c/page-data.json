{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/lzw-encoding-in-c/","webpackCompilationHash":"539c93736a11b6b79b58","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"eae8cda9-6d67-5677-b6e6-9d05679e4c57","html":"<p>原文链接见：<a href=\"http://blog.csdn.net/zazzle/article/details/9103885\">http://blog.csdn.net/zazzle/article/details/9103885</a></p>\n<p>实验目的：\n(1).利用LZW算法给一个字符串编码</p>\n<p>实验原理：\n(1).构造一个4096个元素的字典数组，前256个初始化为ASCII字符集，即表示单个字符。\n(2).逐个读入测试字符串中的字符。\n(3).判断这个字符是否在字典中\n(4).由于先初始化了前256个元素，所以单个字符肯定是在字典中的。\n(5).读入下一个字符，添加到前一个字符后面，判断字符串在不在字典中，如果在不做什么，否则更新字典，从256开始更新。</p>\n<p>实验步骤：\n(1).初始化字典。\n(2).读入字符串并更新字典。\n(3).打印出对字符串的编码。</p>\n<p>具体实现代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;string.h></span></span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STR_LEN 100</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DIC_LEN 4096</span>\n\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> str<span class=\"token punctuation\">[</span>STR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> index<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> Dict<span class=\"token punctuation\">[</span>DIC_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">in_dict</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 判断一个字符串s是否在字典中 */</span>\n  <span class=\"token keyword\">int</span> <span class=\"token function\">index_of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/* 通过字符串在字典中查找编号 */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">insert_into_dict</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/*把字符串添加到字典中 */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 初始化字典 */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/* 输出编码与相应的字符串 */</span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> ch<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>str <span class=\"token operator\">=</span> <span class=\"token string\">\"hellohellohello\"</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> old_string<span class=\"token punctuation\">[</span>STR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> new_string<span class=\"token punctuation\">[</span>STR_LEN<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    old_string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    old_string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">init</span><span class=\"token punctuation\">(</span>Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      ch <span class=\"token operator\">=</span> str<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>new_string<span class=\"token punctuation\">,</span> old_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">strncat</span><span class=\"token punctuation\">(</span>new_string<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ch<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">in_dict</span><span class=\"token punctuation\">(</span>new_string<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>old_string<span class=\"token punctuation\">,</span> new_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">/* 更新旧字符串 */</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        code <span class=\"token operator\">=</span> <span class=\"token function\">index_of</span><span class=\"token punctuation\">(</span>old_string<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 找到编码 */</span>\n        <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> old_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 输出编码 */</span>\n        <span class=\"token function\">insert_into_dict</span><span class=\"token punctuation\">(</span>new_string<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 更新字典 */</span>\n        j<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        old_string<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> ch<span class=\"token punctuation\">;</span>\n        old_string<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    code <span class=\"token operator\">=</span> <span class=\"token function\">index_of</span><span class=\"token punctuation\">(</span>old_string<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">output</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> old_string<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">in_dict</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DIC_LEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">index_of</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DIC_LEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">strcmp</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> Dict<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> Dict<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">insert_into_dict</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    Dict<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">strcpy</span><span class=\"token punctuation\">(</span>Dict<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token operator\">*</span>Dict<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> DIC_LEN<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> STR_LEN<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Dict<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      Dict<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>index <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Dict<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>str<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">)</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">void</span> <span class=\"token function\">output</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> code<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d (%s)\\n\"</span><span class=\"token punctuation\">,</span> code<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试字符串是“hellohellohello”\n运行结果：\n104(h)\n101(e)\n108(l)\n108(l)\n111(o)\n256(he)\n258(ll)\n260(oh)\n257(el)</p>\n<p>用这种方法也能实现文本压缩，只要把字典输出到文件中，再把上述对文本的编码也附加到压缩文件中，解压的时候把编码从字典中对比就能实现解压了。</p>","fields":{"slug":"/posts/lzw-encoding-in-c/","tagSlugs":["/tag/programming/"]},"frontmatter":{"date":"2013-06-15","description":"利用LZW算法给一个字符串编码...","tags":["Programming"],"title":"CSDN老博文迁移-用lzw算法编码一个字符串"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/lzw-encoding-in-c/"}}}