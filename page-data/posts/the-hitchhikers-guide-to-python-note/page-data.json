{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/the-hitchhikers-guide-to-python-note/","webpackCompilationHash":"55513de83e71e41db443","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"f8db1884-c8ab-5066-ad08-22a0a5e8f4d0","html":"<p>这不是一本初学者的教程，里面没有涉及太多语法特性，作者主要精力用于描述python编程中的一些最佳实践，以及开发高质量应用的一些经验，如使用pip管理依赖，把组件以vendor的形式发布到网络上，如何跨平台开发，组织代码等</p>\n<h1 id=\"目录结构\"><a href=\"#%E7%9B%AE%E5%BD%95%E7%BB%93%E6%9E%84\" aria-label=\"目录结构 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>目录结构</h1>\n<h2 id=\"13章\"><a href=\"#13%E7%AB%A0\" aria-label=\"13章 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>1~3章</h2>\n<p>前3章讲的是工具性的内容，开发环境，python版本，编辑器，实用小工具等，对于有生产软件开发经验的人基本可以跳过</p>\n<h2 id=\"第四章如何写好代码\"><a href=\"#%E7%AC%AC%E5%9B%9B%E7%AB%A0%E5%A6%82%E4%BD%95%E5%86%99%E5%A5%BD%E4%BB%A3%E7%A0%81\" aria-label=\"第四章如何写好代码 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第四章如何写好代码</h2>\n<p>这块的内容也比较浅显通用，如果有几年软件开发经验应该都能体会到，举几个例子：</p>\n<h3 id=\"函数定义要保持简短，返回值要尽量保持简单。\"><a href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89%E8%A6%81%E4%BF%9D%E6%8C%81%E7%AE%80%E7%9F%AD%EF%BC%8C%E8%BF%94%E5%9B%9E%E5%80%BC%E8%A6%81%E5%B0%BD%E9%87%8F%E4%BF%9D%E6%8C%81%E7%AE%80%E5%8D%95%E3%80%82\" aria-label=\"函数定义要保持简短，返回值要尽量保持简单。 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数定义要保持简短，返回值要尽量保持简单。</h3>\n<p>这个很好理解，太长的函数不便于复用，如果返回值太过于复杂了可以考虑抽象</p>\n<h3 id=\"函数参数定义要明确，尽量避免传列表和字典\"><a href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E5%AE%9A%E4%B9%89%E8%A6%81%E6%98%8E%E7%A1%AE%EF%BC%8C%E5%B0%BD%E9%87%8F%E9%81%BF%E5%85%8D%E4%BC%A0%E5%88%97%E8%A1%A8%E5%92%8C%E5%AD%97%E5%85%B8\" aria-label=\"函数参数定义要明确，尽量避免传列表和字典 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>函数参数定义要明确，尽量避免传列表和字典</h3>\n<p>这个也好理解，因为简单类型可以用类型推导，复杂的类型没法类型推导而且第一眼看过去不知道是什么类型，影响可读性</p>\n<h3 id=\"相信开发者都是理性人\"><a href=\"#%E7%9B%B8%E4%BF%A1%E5%BC%80%E5%8F%91%E8%80%85%E9%83%BD%E6%98%AF%E7%90%86%E6%80%A7%E4%BA%BA\" aria-label=\"相信开发者都是理性人 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>相信开发者都是理性人</h3>\n<p>python是一门很灵活的语言，没有提供私有方法私有属性的语法特性，是因为作者相信每个开发者都是理性的，不会滥用语言给开的后门，当然作者给了最佳实践就是用下划线来区分私有，这样看到代码就知道这是个私有方法，别轻易调用后果自负。而且语言给了开发者自由\n修改库方法默认行为的权利，所以要自己对自己负责。</p>\n<h3 id=\"一些开发中遇到的陷阱\"><a href=\"#%E4%B8%80%E4%BA%9B%E5%BC%80%E5%8F%91%E4%B8%AD%E9%81%87%E5%88%B0%E7%9A%84%E9%99%B7%E9%98%B1\" aria-label=\"一些开发中遇到的陷阱 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>一些开发中遇到的陷阱</h3>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">append_to</span><span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">,</span> to<span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    to<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>element<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> to</code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"php\"><pre class=\"language-php\"><code class=\"language-php\"><span class=\"token keyword\">function</span> <span class=\"token function\">append_to</span><span class=\"token punctuation\">(</span><span class=\"token variable\">$element</span><span class=\"token punctuation\">,</span> <span class=\"token variable\">$to</span><span class=\"token operator\">=</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token variable\">$to</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token variable\">$element</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token variable\">$to</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在python中默认参数是在函数创建时被初始化一次，以后多次调用都使用这一个值\n而php不一样，默认参数随着函数每次调用都使用传入的值，在这个例子中是空，个人感觉php的行为更合理点</p>\n<h3 id=\"python的装饰器语法\"><a href=\"#python%E7%9A%84%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AF%AD%E6%B3%95\" aria-label=\"python的装饰器语法 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>python的装饰器语法</h3>\n<p>和装饰器模式的概念类似，已有一个咖啡对象，可以通过装饰器模式生成一个加糖的开发对象，也可以生成一个加牛奶的咖啡对象，具体例子见下：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">p_decorate</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">def</span> <span class=\"token function\">func_wrapper</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n       <span class=\"token keyword\">return</span> <span class=\"token string\">\"&lt;p>{0}&lt;/p>\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n   <span class=\"token keyword\">return</span> func_wrapper\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">strong_decorate</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func_wrapper</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&lt;strong>{0}&lt;/strong>\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> func_wrapper\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">div_decorate</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">func_wrapper</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token string\">\"&lt;div>{0}&lt;/div>\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>func<span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> func_wrapper\n\n@div_decorate\n@p_decorate\n@strong_decorate\n<span class=\"token keyword\">def</span> <span class=\"token function\">get_text</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n   <span class=\"token keyword\">return</span> <span class=\"token string\">\"lorem ipsum, {0} dolor sit amet\"</span><span class=\"token punctuation\">.</span><span class=\"token builtin\">format</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span>\n\nget_text <span class=\"token operator\">=</span> div_decorate<span class=\"token punctuation\">(</span>p_decorate<span class=\"token punctuation\">(</span>strong_decorate<span class=\"token punctuation\">(</span>get_text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这么看来python的装饰器和函数式编程中的高阶函数概念差不多，通过一个函数去组合另一个函数，使得生成的函数包含更多的功能，不过装饰器更加强大的一点是它可以在对象方法里使用</p>\n<h3 id=\"文档、测试\"><a href=\"#%E6%96%87%E6%A1%A3%E3%80%81%E6%B5%8B%E8%AF%95\" aria-label=\"文档、测试 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>文档、测试</h3>\n<p>讲了一些测试工具，但是基本思想所有语言都差不多。打包的话可以找现有优质项目的<code class=\"language-text\">setup.py</code>看看</p>\n<h2 id=\"第五章-如何读代码\"><a href=\"#%E7%AC%AC%E4%BA%94%E7%AB%A0-%E5%A6%82%E4%BD%95%E8%AF%BB%E4%BB%A3%E7%A0%81\" aria-label=\"第五章 如何读代码 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第五章 如何读代码</h2>\n<p>读代码各人有各人的技巧，现代的编辑器非常强大，善用跳转调试功能，读起来就很方便了，书中介绍了一个工具叫<a href=\"http://pycallgraph.slowchop.com/en/master/\">python call graph</a>用来生成调用图，对复杂的项目还是调试一遍更容易代码</p>\n<h2 id=\"第六章\"><a href=\"#%E7%AC%AC%E5%85%AD%E7%AB%A0\" aria-label=\"第六章 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第六章</h2>\n<p>讲了如何打包代码，如何发布到pypi上</p>\n<h2 id=\"第七章及以后\"><a href=\"#%E7%AC%AC%E4%B8%83%E7%AB%A0%E5%8F%8A%E4%BB%A5%E5%90%8E\" aria-label=\"第七章及以后 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>第七章及以后</h2>\n<p>不想看了，主要介绍了一些开发的工具，如jenkins, travis-ci, numpy, jupyter等</p>","fields":{"slug":"/posts/the-hitchhikers-guide-to-python-note/","tagSlugs":["/tag/python/"]},"frontmatter":{"date":"2018-03-09","description":"速读了《The hitchhiker's guide to python》这本书的英文影印版，记录一下读书笔记","tags":["Python"],"title":"The hitchhiker's guide to python 读书笔记"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/the-hitchhikers-guide-to-python-note/"}}}