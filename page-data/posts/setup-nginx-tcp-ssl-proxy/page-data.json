{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/setup-nginx-tcp-ssl-proxy","webpackCompilationHash":"d94862b0a5cb0cab2c6f","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"c84a90eb-4ac3-5333-9584-ab7b91358b0b","html":"<h2 id=\"生成自签发证书\"><a href=\"#%E7%94%9F%E6%88%90%E8%87%AA%E7%AD%BE%E5%8F%91%E8%AF%81%E4%B9%A6\" aria-label=\"生成自签发证书 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>生成自签发证书</h2>\n<p>要做ssl代理必须要有证书，很多人会从第三方认证机构购买，有些人会直接使用lets encrypt的免费证书，但因为我们只是服务端通信用，所以不必要使用权威认证机构签发的证书，自己签发一个就行，参考了下面这篇文章生成自签发证书</p>\n<p><a href=\"https://zonena.me/2016/02/creating-ssl-certificates-in-3-easy-steps/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://zonena.me/2016/02/creating-ssl-certificates-in-3-easy-steps/</a></p>\n<p>生成使用ed25519加密算法的证书，第一行生成密钥，第二行生成证书</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\">openssl ecparam -out /etc/ssl/private/ss1-nginx.key -name prime256v1 -genkey\nopenssl req -new -days <span class=\"token number\">3650</span> -nodes -x509 <span class=\"token punctuation\">\\</span>\n    -subj <span class=\"token string\">\"/C=US/ST=Denial/L=Springfield/O=Dis/CN=www.example.com\"</span> <span class=\"token punctuation\">\\</span>\n    -key /etc/ssl/private/ss1-nginx.key -out /etc/ssl/certs/ss1-nginx.cert</code></pre></div>\n<h2 id=\"重新编译nginx\"><a href=\"#%E9%87%8D%E6%96%B0%E7%BC%96%E8%AF%91nginx\" aria-label=\"重新编译nginx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>重新编译nginx</h2>\n<p>因为要到nginx 1.9之后才开始支持tcp代理，所以如果要用这个功能必须要使用高版本nginx，如果有docker镜像是最好的，没有的话就得自己重新编译，具体编译步骤如下，我用的是archlinux，所以我下了我本地版本的nginx，然后使用了如下的编译选项，<code class=\"language-text\">--with-stream</code>，<code class=\"language-text\">--with-stream_ssl_module</code>这2个选项必须要有</p>\n<div class=\"gatsby-highlight\" data-language=\"shell\"><pre class=\"language-shell\"><code class=\"language-shell\"><span class=\"token function\">wget</span> https://nginx.org/download/nginx-1.16.0.tar.gz\n<span class=\"token function\">tar</span> zxf nginx-1.16.0.tar.gz\n<span class=\"token builtin class-name\">cd</span> nginx-1.16.0\n\n./configure <span class=\"token punctuation\">\\</span>\n--sbin-path<span class=\"token operator\">=</span>/usr/bin/nginx <span class=\"token punctuation\">\\</span>\n--conf-path<span class=\"token operator\">=</span>/etc/nginx/nginx.conf <span class=\"token punctuation\">\\</span>\n--pid-path<span class=\"token operator\">=</span>/var/run/nginx.pid <span class=\"token punctuation\">\\</span>\n--with-http_ssl_module <span class=\"token punctuation\">\\</span>\n--with-stream <span class=\"token punctuation\">\\</span>\n--with-stream_ssl_module\n\n<span class=\"token function\">make</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">make</span> <span class=\"token function\">install</span></code></pre></div>\n<h2 id=\"配置nginx\"><a href=\"#%E9%85%8D%E7%BD%AEnginx\" aria-label=\"配置nginx permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>配置nginx</h2>\n<p>总的来说就是2台服务器，前面的这台服务器叫反向代理服务器，后面的这台叫作上游服务器，为了安全起见反代和上游服务器之间的数据报要加密，所以引入一个ssl来给tcp包一层</p>\n<p>以下是反代服务器的配置</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\">stream <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">upstream</span> backend <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">server</span> <span class=\"token number\">129.181</span><span class=\"token number\">.12</span><span class=\"token number\">.5</span><span class=\"token punctuation\">:</span><span class=\"token number\">92345</span> weight<span class=\"token operator\">=</span><span class=\"token number\">1</span> max_fails<span class=\"token operator\">=</span><span class=\"token number\">3</span> fail_timeout<span class=\"token operator\">=</span><span class=\"token number\">10</span>s<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server</span> <span class=\"token number\">129.181</span><span class=\"token number\">.12</span><span class=\"token number\">.6</span><span class=\"token punctuation\">:</span><span class=\"token number\">92345</span> weight<span class=\"token operator\">=</span><span class=\"token number\">2</span> max_fails<span class=\"token operator\">=</span><span class=\"token number\">3</span> fail_timeout<span class=\"token operator\">=</span><span class=\"token number\">5</span>s<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">listen</span>     <span class=\"token number\">12345</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">proxy_pass</span> backend<span class=\"token punctuation\">;</span>\n        proxy_ssl  on<span class=\"token punctuation\">;</span>\n        proxy_ssl_certificate         <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span><span class=\"token keyword\">ssl</span><span class=\"token operator\">/</span>certs<span class=\"token operator\">/</span>nginx1<span class=\"token punctuation\">.</span>cert<span class=\"token punctuation\">;</span>\n        proxy_ssl_certificate_key     <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span><span class=\"token keyword\">ssl</span><span class=\"token operator\">/</span>private<span class=\"token operator\">/</span>nginx1<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>配置很显然，指定了证书和密钥的位置，指定了上游服务的ip端口，指定了2个服务的权重，意思就是本机的12345收到请求（非ssl加密），再经过ssl加密后转到后面的2台服务器的92345端口</p>\n<p>接下来配置上游服务器，也需要用到nginx，还要用到相同的证书进行解密</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\">stream <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">upstream</span> backend <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">server</span> <span class=\"token number\">127.0</span><span class=\"token number\">.0</span><span class=\"token number\">.1</span><span class=\"token punctuation\">:</span><span class=\"token number\">8598</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">92345</span> <span class=\"token keyword\">ssl</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">proxy_pass</span> backend<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">ssl_certificate</span>         <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span><span class=\"token keyword\">ssl</span><span class=\"token operator\">/</span>certs<span class=\"token operator\">/</span>nginx1<span class=\"token punctuation\">.</span>cert<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">ssl_certificate_key</span>     <span class=\"token operator\">/</span>etc<span class=\"token operator\">/</span><span class=\"token keyword\">ssl</span><span class=\"token operator\">/</span>private<span class=\"token operator\">/</span>nginx1<span class=\"token punctuation\">.</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个配置也很好理解，监听92345端口，并且只接受ssl加密后了连接，收到请求后拿配置在证书和密就进行解密，解密完后把数据转发给后的的8598应用，一加密一解密，中间谁也不知道传了什么数据，除非攻击者厉害到能破解ecc算法，建议走外网的代理都使是ssl加密再传，提高安全性</p>\n<p>需要注意这2个stream配置都要放到<code class=\"language-text\">nginx.conf</code>，千万别放到<code class=\"language-text\">sites-available</code>这种地方，不然就会进入到<code class=\"language-text\">http</code>部分</p>","fields":{"slug":"/posts/setup-nginx-tcp-ssl-proxy","tagSlugs":["/tag/linux/","/tag/web/"]},"frontmatter":{"date":"2019-07-02 00:02","description":"配置nginx tcp ssl负载均衡","tags":["Linux","Web"],"title":"配置nginx tcp ssl负载均衡"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/setup-nginx-tcp-ssl-proxy"}}}