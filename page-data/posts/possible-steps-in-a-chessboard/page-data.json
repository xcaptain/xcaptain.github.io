{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/possible-steps-in-a-chessboard/","webpackCompilationHash":"55513de83e71e41db443","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"7f96a2cf-2e08-5e46-93fe-3348cc629fac","html":"<p>原文链接见：<a href=\"http://blog.csdn.net/zazzle/article/details/8825150\">http://blog.csdn.net/zazzle/article/details/8825150</a></p>\n<p>问题，求下列递推式值：\n= 3<em>-2</em>+2,\na1=3,a2=7,a3=17,a4=41, 求</p>\n<p>来源：\na1 = 3, a2 = 7, a3 = 17, a4 = 41, a5 =99</p>\n<p>b1 = 1, b2 = 2, b3 = 5, b4 = 12, b5 =29</p>\n<p>更深的来源：走棋盘问题，一个无限大的棋盘上有人在走路，可以往3个方向走，上，左，右。\n向前走之后原来那个格子就不能走了，问如果走n步有几种可能的走法。</p>\n<p>我的思路是按照排列组合的方法来数情况，如果可能就列出递归式来。\n第一步如果是上，第二步有3种走法。\n第一步如果是左或者右，第二步有2种走法。\n…</p>\n<p>到最后肯定能列举出走n步的可能数，但是不可能单纯的数数，可以利用数列的思想来做。\n设走n步有an种可能，an由3部分组成，b1,n b2,n b3,n\nan = b1,n + b2,n + b3,n ，其中b2,n= b3,n</p>\n<p>这样下去就能得到递归式了。</p>\n<p>其中是an的前n-3项和，到此递归式出来了，可以编程求解了。</p>\n<p>因为a1= 3, a2 = 7, a3 = 17, a4 = 41, a5 = 99 …</p>\n<p>下面开始写程序：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token comment\">/*\n   * count the probable outcome for nstep in a matrix\n   * algorithms: an = 3*a(n-1)-2*S(n-3)-4\n   * a1 = 3, a2 = 7, a3 = 17,a4 = 41, a5 = 99\n   */</span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n  <span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAX 100</span>\n\n  <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">int</span> a<span class=\"token punctuation\">[</span>MAX<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17</span><span class=\"token punctuation\">,</span> <span class=\"token number\">41</span><span class=\"token punctuation\">,</span><span class=\"token number\">99</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> S<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"input the steps n:\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">scanf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    S <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      S <span class=\"token operator\">+=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token operator\">*</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token operator\">*</span>S <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"n = %d, methods =%lld\\n\"</span><span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>结果：n= 5, 99 methods\nn = 6, 239 methods</p>\n<p>算小数据还可以，就是说n&#x3C; 40以下可以算，超过40连longlong int都溢出，日子真是没法过了，增长的怎么会这么快啊。\n大数据运算真是重头戏啊。</p>","fields":{"slug":"/posts/possible-steps-in-a-chessboard/","tagSlugs":["/tag/programming/"]},"frontmatter":{"date":"2013-04-19","description":"棋盘中走n步的所有可能走法...","tags":["Programming"],"title":"CSDN老博文迁移-棋盘中走n步的所有可能走法"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/possible-steps-in-a-chessboard/"}}}