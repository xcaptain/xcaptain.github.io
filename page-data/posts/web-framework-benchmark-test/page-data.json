{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/web-framework-benchmark-test/","webpackCompilationHash":"55513de83e71e41db443","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"1728711e-1489-55f7-9050-2213abc26f6c","html":"<p>最近因为工作原因调研了几款PHP框架，现在主要来做个性能测试，看看不同框架在不同场景下各有什么优缺点，由于是性能测试，所以先一下我的环境配置:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">CPU: Intel Core i7-7500U @ 4x 3.5GHz [25.0°C]\nGPU: Mesa DRI Intel(R) HD Graphics 620 (Kaby Lake GT2)\nRAM: 1788MiB / 7865MiB\nphp: 7.2.0\npython: 3.6.3\nnode: 9.2.0\nrustc: 1.24.0-nightly</code></pre></div>\n<p>测试工具<a href=\"https://www.joedog.org/siege-home/\">siege</a></p>\n<h1 id=\"lumen\"><a href=\"#lumen\" aria-label=\"lumen permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>lumen</h1>\n<p>lumen号称是速度最快的微服务框架，先测试下这个框架的性能</p>\n<h2 id=\"通过命令行生成的未做任何处理的站点\"><a href=\"#%E9%80%9A%E8%BF%87%E5%91%BD%E4%BB%A4%E8%A1%8C%E7%94%9F%E6%88%90%E7%9A%84%E6%9C%AA%E5%81%9A%E4%BB%BB%E4%BD%95%E5%A4%84%E7%90%86%E7%9A%84%E7%AB%99%E7%82%B9\" aria-label=\"通过命令行生成的未做任何处理的站点 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>通过命令行生成的未做任何处理的站点</h2>\n<p>操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">lumen new lumen-bench\ncd lumen-bench\ncomposer install\ncomposer require php-pm/httpkernel-adapter:dev-maste\n./vendor/bin/ppm start --bootstrap=laravel --port=8000 --cgi-path=/usr/bin/php\nsiege 'http://localhost:8000' -d1 -r20 -c20</code></pre></div>\n<p>结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Transactions:                    400 hits\nAvailability:                 100.00 %\nElapsed time:                  13.59 secs\nData transferred:               0.02 MB\nResponse time:                  0.02 secs\nTransaction rate:              29.43 trans/sec\nThroughput:                     0.00 MB/sec\nConcurrency:                    0.67\nSuccessful transactions:         400\nFailed transactions:               0\nLongest transaction:            0.10\nShortest transaction:           0.00</code></pre></div>\n<p>在这里没有用php内建的server而是使用了<a href=\"https://github.com/php-pm/php-pm\">php-pm</a>是因为我用内建的server跑测试，并发上去之后完全没法测，性能太差了，目前看来ppm的性能还不错</p>\n<h2 id=\"还是上面的站点，但是稍作修改\"><a href=\"#%E8%BF%98%E6%98%AF%E4%B8%8A%E9%9D%A2%E7%9A%84%E7%AB%99%E7%82%B9%EF%BC%8C%E4%BD%86%E6%98%AF%E7%A8%8D%E4%BD%9C%E4%BF%AE%E6%94%B9\" aria-label=\"还是上面的站点，但是稍作修改 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>还是上面的站点，但是稍作修改</h2>\n<p>操作：</p>\n<p>编辑<code class=\"language-text\">bootstrap/app.php</code>把eloquent开启，再重复上面的步骤</p>\n<p>结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Transactions:                    400 hits\nAvailability:                 100.00 %\nElapsed time:                  15.45 secs\nData transferred:               0.02 MB\nResponse time:                  0.02 secs\nTransaction rate:              25.89 trans/sec\nThroughput:                     0.00 MB/sec\nConcurrency:                    0.47\nSuccessful transactions:         400\nFailed transactions:               0\nLongest transaction:            0.11\nShortest transaction:           0.00</code></pre></div>\n<p>我在公司观察到的结果是开启eloquent之后性能大幅降低，但是我在自己电脑上做测试却不能复现了，难道是php-pm的优化做得比较好？</p>\n<h2 id=\"laravel\"><a href=\"#laravel\" aria-label=\"laravel permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>laravel</h2>\n<p>操作：</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">laravel new laravel-bench\ncd laravel-bench\ncomposer install\ncomposer require php-pm/httpkernel-adapter:dev-maste\n./vendor/bin/ppm start --bootstrap=laravel --port=8000 --cgi-path=/usr/bin/php\nsiege 'http://localhost:8000' -d1 -r20 -c20</code></pre></div>\n<p>结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Transactions:                    400 hits\nAvailability:                 100.00 %\nElapsed time:                  15.81 secs\nData transferred:               0.01 MB\nResponse time:                  0.04 secs\nTransaction rate:              25.30 trans/sec\nThroughput:                     0.00 MB/sec\nConcurrency:                    1.08\nSuccessful transactions:         400\nFailed transactions:               0\nLongest transaction:            0.33\nShortest transaction:           0.00</code></pre></div>\n<p>目前简单看来平均访问时间比lumen慢了一倍，但是总体性能还是不错的，可能是php-pm的帮助吧</p>\n<h2 id=\"flask\"><a href=\"#flask\" aria-label=\"flask permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>flask</h2>\n<p>操作：</p>\n<p><code class=\"language-text\">hello.py</code></p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> flask <span class=\"token keyword\">import</span> Flask\napp <span class=\"token operator\">=</span> Flask<span class=\"token punctuation\">(</span>__name__<span class=\"token punctuation\">)</span>\n\n@app<span class=\"token punctuation\">.</span>route<span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello_world</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">return</span> <span class=\"token string\">'Hello, World!'</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">pip install Flask\nset -x FLASK_APP hello.py\npython -m flask run\nsiege 'http://localhost:5000' -d1 -r20 -c20</code></pre></div>\n<p>结果:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Transactions:                    400 hits\nAvailability:                 100.00 %\nElapsed time:                  15.40 secs\nData transferred:               0.00 MB\nResponse time:                  0.01 secs\nTransaction rate:              25.97 trans/sec\nThroughput:                     0.00 MB/sec\nConcurrency:                    0.37\nSuccessful transactions:         400\nFailed transactions:               0\nLongest transaction:            0.05\nShortest transaction:           0.00</code></pre></div>\n<p>真令人吃惊，在20个并发的情况下python表现良好，而且响应速度非常快，而且内建的http server比php的要好多了，如果在复杂应用上还能维持这个表现那就太棒了</p>\n<h2 id=\"django\"><a href=\"#django\" aria-label=\"django permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Django</h2>\n<p>操作：\n按照django文档上介绍的使用django-admin生成的一个简单站点，懒得改代码，连资源文件也一起返回了</p>\n<p>结果:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Transactions:                    800 hits\nAvailability:                 100.00 %\nElapsed time:                  17.95 secs\nData transferred:               6.48 MB\nResponse time:                  0.05 secs\nTransaction rate:              44.57 trans/sec\nThroughput:                     0.36 MB/sec\nConcurrency:                    2.11\nSuccessful transactions:         800\nFailed transactions:               0\nLongest transaction:            1.13\nShortest transaction:           0.00</code></pre></div>\n<p>就速度来说比flask慢了很多，但是考虑到返回了html,css,js，所以暂且认为速度还是很快的，比开启了ppm的php还要快，python做web还是挺合适的嘛</p>\n<h2 id=\"express\"><a href=\"#express\" aria-label=\"express permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>express</h2>\n<p>操作：</p>\n<p>按照文档写的一个简单的例子</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> express <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'express'</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">const</span> app <span class=\"token operator\">=</span> <span class=\"token function\">express</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span><span class=\"token string\">'/'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token parameter\">req<span class=\"token punctuation\">,</span> res</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> res<span class=\"token punctuation\">.</span><span class=\"token function\">send</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Hello World!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\napp<span class=\"token punctuation\">.</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span><span class=\"token number\">3000</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Example app listening on port 3000!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>结果:</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Transactions:                    900 hits\nAvailability:                 100.00 %\nElapsed time:                  21.52 secs\nData transferred:               0.01 MB\nResponse time:                  0.01 secs\nTransaction rate:              41.82 trans/sec\nThroughput:                     0.00 MB/sec\nConcurrency:                    0.49\nSuccessful transactions:         900\nFailed transactions:               0\nLongest transaction:            0.08\nShortest transaction:           0.00</code></pre></div>\n<p>这个速度也是飞快，和flask有得一拼，node的性能以及抗并发能力都不是吹得，就算加到30x30依旧很稳定，考虑到用typescript写代码的体验，我将非常期待使用typescript+express+nodejs开发服务端应用</p>\n<h2 id=\"rocket\"><a href=\"#rocket\" aria-label=\"rocket permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Rocket</h2>\n<p>既然做了评测就顺带看看我最喜欢的rust web框架性能如何</p>\n<p>操作:</p>\n<p>执行文档上的hello world例子</p>\n<p>结果:</p>\n<p>siege不知道为什么跑不出结果，所以用ab的结果替代了，上面的结果都是用siege跑出来的，所以以下的这个结论仅仅是看看而已，不具备参考价值，ab发请求的机制我一直觉得不合理，不像是真实的http请求。</p>\n<div class=\"gatsby-highlight\" data-language=\"markdown\"><pre class=\"language-markdown\"><code class=\"language-markdown\">Concurrency Level:      30\nTime taken for tests:   0.210 seconds\nComplete requests:      900\nFailed requests:        0\nTotal transferred:      148500 bytes\nHTML transferred:       11700 bytes\nRequests per second:    4294.63 [#/sec] (mean)\nTime per request:       6.985 [ms] (mean)\nTime per request:       0.233 [ms] (mean, across all concurrent requests)\nTransfer rate:          692.01 [Kbytes/sec] received</code></pre></div>\n<p>单个请求看平均时间是在6.985ms，性能当之无愧最高，但是不知道为啥用siege就是跑不起来</p>\n<h2 id=\"结后语\"><a href=\"#%E7%BB%93%E5%90%8E%E8%AF%AD\" aria-label=\"结后语 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>结后语</h2>\n<p>本来还想再压一压ruby on rails的，但是想想又算了，虽然在前几年玩过一会儿ror，但是就现代的web开发来说，ror已经算是落伍了。php做web开发这么受欢迎很大原因应该是开发简单，部署简单导致的，看这个评测就性能来说并没有优势。nodejs的性能也很好，但是在进程管理方面还是比较欠缺，如果长时间运行可能会有内存泄漏，在这个hello world的例子看不出来，但是生产环境应用还是得慎重。python在语言特性，性能方面都很棒，下个框架可以考虑试试。rocket在我看来是未来的框架，把代码编译成可执行文件，不依赖容器就能运行，性能也是非常棒，等对rust更熟悉之后找点简单的项目开始练练手用用</p>","fields":{"slug":"/posts/web-framework-benchmark-test/","tagSlugs":["/tag/web/"]},"frontmatter":{"date":"2017-12-15","description":"最近因为工作原因调研了几款PHP框架，现在主要来做个性能测试...","tags":["Web"],"title":"web框架性能测试"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/web-framework-benchmark-test/"}}}