{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/switch-to-hakyll/","webpackCompilationHash":"f6f4562cce5c2ca1e160","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"d1e81cc1-aaa5-5a2f-8d12-a15c8c44b84b","html":"<h3 id=\"准备完全迁移到hakyll上面了\"><a href=\"#%E5%87%86%E5%A4%87%E5%AE%8C%E5%85%A8%E8%BF%81%E7%A7%BB%E5%88%B0hakyll%E4%B8%8A%E9%9D%A2%E4%BA%86\" aria-label=\"准备完全迁移到hakyll上面了 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>准备完全迁移到hakyll上面了</h3>\n<p>之前的博客是使用octopress搭建的，这个静态站点生成器最大的好处就是简单，不需要自己额外的hack，装好octopress，简单设置好之后就能使用，而且提交，部署都有\n现成的工具，主题也有很多，所以一用就用了一年多。从7月份开始就有点厌倦octopress了，因为不喜欢这么傻瓜式的东西，咱们的目标是to be a geeker，当然不能一直\n不进步。hakyll算是非常极客的一个工具了，haskell写的，使用pandoc处理文本，而且配置文件完全是haskell代码，想着能用这么geek的语言，玩这么geek的软件，就\n非常激动。</p>\n<p>使用hakyll也非常简单，步骤是:</p>\n<ol>\n<li><code class=\"language-text\">cabal install hakyll</code> 安装hakyll，这一步非常耗时，因为自己的笔记本CPU落伍了。</li>\n<li><code class=\"language-text\">hakyll-init blog</code> 会在当前目录下创建一个叫作blog的目录。</li>\n<li><code class=\"language-text\">cd blog</code> 进入这个目录，会发现有一系列文件，这是默认的博客站点。</li>\n<li><code class=\"language-text\">cabal build</code> 默认会build这个haskell站点，生成站点可执行文件。</li>\n<li><code class=\"language-text\">dist/build/site/site build</code> 会编译<code class=\"language-text\">posts/</code>下面的文件，生成html文件到<code class=\"language-text\">_site/posts/</code>下面。</li>\n<li><code class=\"language-text\">dist/build/site/site watch</code> 会开启一个web服务器，默认访问地址是<a href=\"http://127.0.0.1:4000/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://127.0.0.1:4000/</a> 点击访问，然后就你发现默认的首页了。</li>\n<li>默认站点好了接下来就是迁移原博客的文章，从原来的git仓库中把所有的markdown文件复制到<code class=\"language-text\">posts/</code>下面。</li>\n<li>再次试着build整个站点，这时候可能会有点问题，我这里因为有的文章元数据中categories:熟悉为空报了几个错，改完就好了。</li>\n<li>配置博客站点，修改站点外观，添加rss和tag页，我用的是<a href=\"https://github.com/eakron/variadic.me\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">variadic</a>的配置，很简单，配置文件改动很小但是\n却把我要的功能都实现了，真的很厉害。</li>\n<li>再次build，并且watch新的项目，顺利跑通了之后，但是看不到标签，很奇怪，原来老的文章是使用categories作为标签名的，现在使用tags了，自然要改。\n<code class=\"language-text\">sed -i &#39;s/categories\\:/tags\\:/g&#39;</code> 一行sed命令，批量替换，真不错。</li>\n<li>博客在本地搭好了，并且预览过了，接下来就是部署到线上，还是用github-pages。那么我就需要2个分支，一个source分支用来存放静态站点的代码，包括站点\n配置，原始markdown格式的博文，这样将来要换到别的机器上，直接clone source分支的代码下来build就行了。还有一个分支是master分支，这个分支存放build之后\n的文件，也就是所有的静态文件，html, css, js, 图片等。因为我线上已经有一个博客站点了，所以只需要添加远程github仓库就行。\n<code class=\"language-text\">cd blog</code>进入我的博客根目录，执行<code class=\"language-text\">git init .</code> 添加版本控制, <code class=\"language-text\">git add .</code>, <code class=\"language-text\">git commit -m &#39;first commit&#39;</code>, <code class=\"language-text\">git checkout -b source</code>切换到\nsource分支，然后删掉master分支<code class=\"language-text\">git branch -d master</code>，因为代码只要保存在source，master只能放生成的静态文件。<code class=\"language-text\">git remote add origin git@github.com:xcaptain/xcaptain.github.io</code>添加我的远程仓库，\n要注意编辑.gitignore文件，把<em>site, _tmp, _cache都忽略掉。然后是<code class=\"language-text\">git submodule add git@github.com:xcaptain/xcaptain.github.io.git _site/</code>把\n线上的master分支作为我的一个模块，克隆到</em>site目录下。再执行一下<code class=\"language-text\">dist/build/site/site build</code>会生成新的静态文件写入<em>site/目录，当然那些老的文件不会被\n删掉，比如说我之前的CNAME文件，favicon文件都还留着，这时候<code class=\"language-text\">cd _site/</code>然后再提交一下。本地所有的代码都干净之后就是推送部署了。在<code class=\"language-text\">blog/</code>目录下执行\n<code class=\"language-text\">git push origin source</code>把当前分支推送到origin的source分支，然后再切换到`</em>site/<code class=\"language-text\">目录，执行</code>git push origin master`把生成的静态文件推送到线上的\nmaster分支。访问<a href=\"http://blog.iyue.club\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://blog.iyue.club</a>开测，真不错。</li>\n</ol>\n<p>虽然说没有了octopress那么多做好的功能，但是通过折腾hakyll学习到了很多知识，等以后优化这个部署流程的时候可以自己写脚本部署，省得总是自己多次写shell命令</p>\n<h3 id=\"update-2017-05-05\"><a href=\"#update-2017-05-05\" aria-label=\"update 2017 05 05 permalink\" class=\"anchor\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Update 2017-05-05:</h3>\n<p>模板重写，使用了<a href=\"https://github.com/oxalorg/sakura\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">sakura</a>的样式，界面稍微变得更加美观点了。</p>","fields":{"slug":"/posts/switch-to-hakyll/","tagSlugs":["/tag/blog/"]},"frontmatter":{"date":"2015-12-10","description":"之前的博客是使用octopress搭建的，这个静态站点生成器最大的好处就是简单，不需要自己额外的hack，装好octopress，简单设置好之后就能使用,而且提交，部署都有...","tags":["Blog"],"title":"博客从octopress迁移到hakyll"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/switch-to-hakyll/"}}}