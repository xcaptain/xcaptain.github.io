{"componentChunkName":"component---src-templates-post-template-js","path":"/posts/use-fish/","webpackCompilationHash":"f6f4562cce5c2ca1e160","result":{"data":{"site":{"siteMetadata":{"author":{"name":"Joey Xie","contacts":{"twitter":"xf_joey"}},"disqusShortname":"joeyxf-com","subtitle":"每天进步一点点","title":"Joey的博客","url":"https://joeyxf.com"}},"markdownRemark":{"id":"0ee0c69a-166d-5018-a98f-211bbbac65b2","html":"<p>从最初安装ubuntu到现在细细数来已经用过很多个Unix like system了，也经历过很多种shell\n从linux下标准的bash，到freebsd的tcsh，到补全功能非常强大的zsh，现在尝试了一个新的fish。\n这不是鱼，全名叫做(friendly interactive shell)，用户友好的shell，语法高亮功能使得不容易\n输错命令，自动补全功能比zsh还强大，能够根据man page里的关键字来补全，也能根据~/.ssh/config来\n补全ssh命令，历史记录功能也比bash之类的友好。</p>\n<p>fish的项目主页在<a href=\"https://github.com/fish-shell/fish-shell\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">这里</a>，可以看到这个项目的还是比较\n活跃的。因为我用的是archlinux，所以就没有去从build源代码，而是直接<code class=\"language-text\">pacman -S fish</code>安装的。</p>\n<p>默认的fish已经很强大了:\n1. 内建了命令行语法高亮功能。输入不同的命令会用不同的颜色来显示。\n2. 要查找一个命令的历史记录不要用ctrl-R来找，直接输入这个命令的开头几个字母fish会自动用阴影\n显示上一次执行的这条命令，然后按下ctrl-E或者是右方向键就能全部补齐了，这个功能对于很长的命令\n来说真是太赞了，而且感觉比bash的ctrl-R强大多了。\n3. 自动补全功能非常强大。我在编辑这篇博客的时候不是输入<code class=\"language-text\">vim 20140-08-31-use-fish-shell.markdown</code>来\n编辑的，而是直接<code class=\"language-text\">vim fish&lt;Tab&gt;</code>来找到这个文件的，真是强大的功能，这是我目前发现的唯一支持任意\n位置补齐的shell，就算是也很不错的zsh也只支持从头补齐。\n4. 自动命令行纠错。比如说你要执行<code class=\"language-text\">cd ~/Documents</code>但是输成了<code class=\"language-text\">cd ~/documents</code>也没有关系，直接就自动\n纠错了。有了它真是方便。</p>\n<p>虽然默认的fish很不错，但是我还是从github上clone了<a href=\"https://github.com/bpinto/oh-my-fish\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">oh-my-fish</a>这个项目,\n这个项目和<a href=\"https://github.com/robbyrussell/oh-my-zsh\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">oh-my-zsh</a>的结构很像，里面的配置都很有用，而且有多种\n主题，当对目前这个主题审美疲劳了，换一个主题还是很不错的。使用oh-my-fish来作为fish的配置也很简单，按照github\n上面的操作一步一步做就是了。</p>\n<p>接下来就是根据自己的喜好自定义fish的theme了，要加载哪个theme只要改<code class=\"language-text\">~/.config/fish/config.fish</code>就ok，找到\n<code class=\"language-text\">set fish_theme</code>这一行，填入你要的theme就行了，我用的是<code class=\"language-text\">set fish_theme zish</code>，这个主题挺漂亮的。</p>\n<p>然后就是自定义一些别名了，fish没有alias这个命令，但是可以用函数来实现自定义别名。既然使用了oh-my-fish的配置\n就得按照它的结构来修改。在<code class=\"language-text\">~/.oh-my-fish/functions/</code>里面放的都是自定义的函数。我先给vi起了个别名vim，因为\n有了vim谁还用vi啊。在这个目录下建一个文件vi.fish。\n<code>\nfunction vi —description ‘alias of vim’\nvim\nend\n</code>\n保存退出，然后在命令行输入vi，这时候打开的就是vim了，连重新打开一个shell都不用就生效了，真是好快啊。</p>\n<p>接下来就是一些关于fish的shell编程方面的问题了。不过这块没有怎么认真去看。工作中用的都是bash，谁会为了执行\n一个脚本而额外安装fish。不过我还是很喜欢fish的语法的，感觉和python和ruby很像，相比之下bash的语法就有点\n另类和老古董了。等以后要用到fish script的时候再去认真研究一下fish syntax。</p>","fields":{"slug":"/posts/use-fish/","tagSlugs":["/tag/linux/","/tag/fish/"]},"frontmatter":{"date":"2014-08-31","description":"从最初安装ubuntu到现在细细数来已经用过很多个Unix like system了，也经历过很多种shell从linux下标准的bash，到freebsd的tcsh...","tags":["Linux","Fish"],"title":"使用fish"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/posts/use-fish/"}}}